/* Generated By:JavaCC: Do not edit this line. RequestParserTokenManager.java */
package cn.sowjz.souwen.v1.req_parser;
import java.io.StringReader;
import java.util.*;
import cn.sowjz.souwen.v1.query.request.SubCrit;

/** Token Manager. */
public class RequestParserTokenManager implements RequestParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 71;
            return 37;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 2;
         }
         if ((active0 & 0x3fc7ffdfcL) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 71;
            return 38;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
            return 39;
         if ((active0 & 0x1800000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 71;
            return 9;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x7fdffffd4L) != 0L || (active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active0 & 0x28L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0x7f9fdbfa0L) != 0L || (active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x4024054L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0x84c0800L) != 0L || (active1 & 0x40L) != 0L)
            return 30;
         if ((active0 & 0x7f1b1b7e0L) != 0L || (active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 3;
            }
            return 30;
         }
         return -1;
      case 4:
         if ((active0 & 0x7a1f1b3c0L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active0 & 0x50000420L) != 0L || (active1 & 0x20L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x621c0b280L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x180310140L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x21c03200L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 30;
         }
         if ((active0 & 0x600008080L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x20401200L) != 0L)
            return 30;
         if ((active0 & 0x1802000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 30;
         }
         return -1;
      case 8:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 30;
         }
         if ((active0 & 0x1002000L) != 0L)
            return 30;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 38:
         return jjStopAtPos(0, 67);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 42:
         return jjStopAtPos(0, 60);
      case 43:
         return jjStopAtPos(0, 62);
      case 44:
         return jjStopAtPos(0, 44);
      case 45:
         return jjStartNfaWithStates_0(0, 63, 39);
      case 46:
         return jjStartNfaWithStates_0(0, 45, 17);
      case 47:
         return jjStopAtPos(0, 61);
      case 58:
         return jjStopAtPos(0, 64);
      case 60:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x240000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 50);
      case 93:
         return jjStopAtPos(0, 51);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100020044L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10208800L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x40L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000010L, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xa8L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x180000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000100L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x440000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40006000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 48);
      case 124:
         return jjStopAtPos(0, 65);
      case 125:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80104000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200081100L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c40200L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10044L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x418202010L, active1, 0x20L);
      case 82:
      case 114:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4a0L, active1, 0x40L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x41800000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 30);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x440000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8100020L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000200L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x220000000L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x102000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 30);
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x400080L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000L, active1, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 30);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000040L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000100L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400010200L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x200001000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x400400000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x200210000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 30);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x101040L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 30);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 30);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 68:
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 30);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200008000L);
      case 72:
      case 104:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 30);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 77:
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 30);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x801000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 30);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 30);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 30);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 89:
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 30);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 30);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 30);
         break;
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 30);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(13, 14);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 2:
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(30);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(30);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(32);
                  }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(30);
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 13:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 15:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 25:
                  if (curChar == 58 && kind > 66)
                     kind = 66;
                  break;
               case 26:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 61 && kind > 68)
                     kind = 68;
                  break;
               case 31:
                  if (curChar == 45)
                     jjCheckNAddStates(3, 5);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 0:
                  if ((0x10000000100000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 1:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x200000002L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 14:
                  jjAddStates(6, 8);
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 21:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   32, 33, 34, 32, 33, 16, 13, 14, 15, 24, 26, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\54", "\56", "\50", "\51", "\173", "\175", "\133", "\135", "\75", 
"\75\75", "\74\76", "\41\75", "\74", "\74\75", "\76", "\76\75", "\52", "\57", "\53", 
"\55", "\72", "\174", null, "\46", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffff0ffffffffdL, 0xffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[37];
private final int[] jjstateSet = new int[74];
protected char curChar;
/** Constructor. */
public RequestParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RequestParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
